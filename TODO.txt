497
137
829

* VC
** Reformat - Ctrl+Shift+I

cat src/Sharpl/Loc.cs | dotnet run trex c#-go.trex

* implement all fix fast paths
** add/mul/div
** like sub

* add is macro
** add Value.is
** compare data usning ==
** add value vs identity to readme
*** map tests

* add zip/unzip
** add Iter lib
*** move reduce
*** import by default?

* add array fib
** add repeat method
*** optional n
*** add Repeat iter
** fill with _

* add io/dump/slurp methods
** slurp literals using readers
*** error for other forms
** take Input/OutputStream

* trex
** add io/string
** add StackTrait with push
*** implement for Array

* oop.sl

* add map support

* add for loop
** multiple bindings
** iterate until any eof
** don't iterate var if expr contains previous vars
*** evaluate and bind per iteration instead

(let [n 0]
  (for [i [1 2 3] 
        j [4 5 6]]
    (inc n (* i j)))
  n)

* add OutputStream type
** bind OUT
** add do-write

* figure out how to close StreamReaders opened using do-read

* add iter support to string
** add char type

* figure out how to get args directly into registers when calling user methods
** value for literals
*** rename SetRegister to SetRegisterIndirect
**** add SetRegisterDirect with value
***** clone
** copy register for bindings
** arrays

* implement inc/set macros
** implement for array item
** implement for string char?
** put items into registers and set back

* add object string calling
** like array
** slice if index is pair

* add trace macro
** add vm.Trace bool
** add Trace op
** trace body if args

* add Reader.Composite type
** move logic from VM

* add vararg support
** mark method as vararg if last arg is array form
** (^join [separator [parts]])
** expand iterator on stack before call

* add support for \r\n\t in string literals
** add support to String Dump

(let [m {"foo":1 "bar":2 "baz":3}]
  (inc (m "bar"))
  m)

* histogram.sl

(let [input (io/slurp (io/open (ARGS 0))) 
      words (string/split input "\r\n\t .,?!")
      result {}]
  (for w words
    (inc (result (string/down w))))

  (let [wcs (apply Array result)
        swcs (sort wcs (^[l r] (> (rest l) (rest r))))
        i 0]
  (for wc swcs
    (say (second wc) " " (first wc))

    (if (> 10 (inc i)
      (stop))))))

* editor
** two panes
*** switch with tab
*** display path
** highlight current line in active pane
** add Editor lib
*** add Pane type
*** x, path?, buffer

(define pane-width (/ (term/width) 2))
(define left-pane (editor/Pane 1 pane-width))
(define right-pane (editor/Pane pane-width pane-width))
(define active-pane left-pane)

(^ switch-pane []
  (set active-pane (if (= active-pane left-pane) right-pane left-pane)))

* improve dec macro
** how do you dec a map entry?

(^ repl []
  (print "sharpl v" VERSION " - may the src be with you\n\n")

  (^ read-input [buffer]
    (print "  ")
    (let [line (read-line)]
      (if line
        (rec (push buffer line)
        (string/join buffer \n)))))
  
  (let [input (read-input [])]
    (if input
      (do 
        (eval input)ger mig absolut iger mig absolut ingentingngenting
        (repl)))))