247
119
330

* VC
** Reformat - Ctrl+Shift+I

[^1]

cat src/Sharpl/Loc.cs | dotnet run trex xx.trex

source.AsSpan(start, length).CopyTo(dest)

* investigate compiling linq expressions
** https://learn.microsoft.com/en-us/dotnet/api/system.linq.expressions.expression?view=net-8.0
** add Linq.Expression? Op.Compile()
*** default null

* add unquote
** add form/reader
** add test
** add readme

(let [bar 42]
  '[foo ,bar baz])

* implement all fix fast paths
** add/mul/div
** like sub

* implement IList in DynamicArrayStack
** benchmark fib map

* add iter macro
** define usermethod like VM.Compose
** call body while T

(let [i 3]
  (iter 
    (say i)
    (> (dec i) 0)
    
  (say 'boom)))

* add enums

(enum Foo bar baz)

Foo/bar
(Foo 0)
(Foo 'baz)
(Int Foo/bar)
(Str Foo/bar)

* add support for optional method args
** suffix with ?

* rename if-else to else
* rename length to len
* rename Symbol to Sym
* rename String to Str
** including lib
* rename benchmark to bench
* bump version

* --

* acc
** bind key constants in term
*** ENTER LEFT RIGHT
** add Term/key-char
*** add char type
** implement read-command
** implement form to create account

* add zip/unzip

* add array fib
** add repeat method
*** optional n
*** add Repeat iter
** fill with _

* add io/dump/slurp methods
** slurp literals using readers
*** error for other forms
** take Input/OutputStream

* trex
** add io/string
** add StackTrait with push
*** implement for Array

* oop.sl

* add map support

* add for loop
** multiple bindings
** iterate until any eof
** don't iterate var if expr contains previous vars
*** evaluate and bind per iteration instead

(let [n 0]
  (for [i [1 2 3] 
        j [4 5 6]]
    (inc n (* i j)))
  n)

* add OutputStream type
** bind OUT
** add do-write

* figure out how to close StreamReaders opened using do-read

* add iter support to string
** add char type

* figure out how to get args directly into registers when calling user methods
** value for literals
*** rename SetRegister to SetRegisterIndirect
**** add SetRegisterDirect with value
***** clone
** copy register for bindings
** arrays

* add object string calling
** like array
** slice if index is pair

* add trace macro
** add vm.Trace bool
** add Trace op
** trace body if args

* add Reader.Composite type
** move logic from VM

* add support for \r\n\t in string literals
** add support to String Dump

(let [m {"foo":1 "bar":2 "baz":3}]
  (inc (m "bar"))
  m)

* histogram.sl

(let [input (io/slurp (io/open (ARGS 0))) 
      words (string/split input "\r\n\t .,?!")
      result {}]
  (for w words
    (inc (result (string/down w))))

  (let [wcs (apply Array result)
        swcs (sort wcs (^[l r] (> (rest l) (rest r))))
        i 0]
  (for wc swcs
    (say (second wc) " " (first wc))

    (if (> 10 (inc i)
      (stop))))))

(define pane-width (/ (term/width) 2))
(define left-pane (editor/Pane 1 pane-width))
(define right-pane (editor/Pane pane-width pane-width))
(define active-pane left-pane)

(^ switch-pane []
  (set active-pane (if (= active-pane left-pane) right-pane left-pane)))

(^ repl []
  (print "sharpl v" VERSION " - may the src be with you\n\n")

  (^ read-input [buffer]
    (print "  ")
    (let [line (read-line)]
      (if line
        (rec (push buffer line)
        (string/join buffer \n)))))
  
  (let [input (read-input [])]
    (if input
      (do 
        (eval input)ger mig absolut iger mig absolut ingentingngenting
        (repl)))))


    (if (= k term/UP) 
      (term/set-region 1:2 (term/width):(- (term/height) 2))
      (term/scroll-up)
      (term/set-region))

    (if (= k term/DOWN) 
      (term/set-region 1:2 (term/width):(- (term/height) 2))
      (term/scroll-down)
      (term/set-region))