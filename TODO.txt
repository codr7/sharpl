April 29th

276
77
204
212

400
91
294
322

shift-ctrl-,/.      zoom
ctrl-k ctrl-d       format

 https://github.com/codr7/sharpl/pull/new/stack-removal

* remove stack
** remove unused ops 
*** CallStack, GetRegister, Repush, Push ops
** remove method arg registers
*** use standard
** NOTES: 
*** arg unzip changed to use next two following args
*** move result in EndFrame?
*** move user method result to Call.Result after call

* remove args from Emit methods
** only keep in EmitCall

* add restart test
** figure out programmatic invocation of restart

** docs
* finish term lib
* add net lib

* make macros composeable
** create user method like VM.Compose
*** one for each arity

* convert type checks to ops
** remove Cast(Loc) variants

* add string support to (emit) like (eval)

* add type hints
** add tyoe decl support
42@Int
42@String
** add TypeCheck form
** add TypeCheck op
** specialize method calls to correct instance method
*** fib bench
** add method overload support

(^foo [x@Int] (+ x x))

* improve startup speed
** instantiate libraries (except core) on reference

* add Span trait/type
** Span<Value>
** iterable
** Add Span<Value> CreateSpan(target, vm, loc)
*** return target for Span type
** allow calling with any SpanTrait to assign 
** use as result type for all slice ops
*** string/list/array/map
**** implement slice assign

* implement custom binary stream port protocol

* add inlining support
** add size limit to config
** add UserMethod.Recursive
** set if any calls to self or recursive methods

* add separate TypeCheck phase to Form
** add Form.TypeCheck(Env, Stack)
** add User/Method arg/ret types
** add optional type to Register
** add Value.Unknown
*** add type
** add TypeCheck op
*** emit on call for untyped args
*** remove manual type checks in methods

* add support for multiple values in pipe/port write call case
* add Pair slice support

* add timeout arg to poll
https://deniskyashif.com/2019/12/11/csharp-channels-part-2/

* add quote args
** pass form/env
*** add FExpr type
** unquote inside method

* add import macro

* add iter benchmark
** fib-tail but use loop instead of tail call

* port list benchmark to python

* track repetitions in dmit
** add flag
** display frame graph

* add UDP support

* add domain socket support

* add while lop
** iterate while condition is true

* add iter macro
** define usermethod like VM.Compose
** call body while T

(let [i 3 n 0]
  [(iter 
    (ind n i)
    (> (dec i) 0))*])

* investigate compiling linq expressions
** https://learn.microsoft.com/en-us/dotnet/api/system.linq.expressions.expression?view=net-8.0
** add Linq.Expression? Op.Compile()
*** default null

* acc
** bind key constants in term
*** ENTER LEFT RIGHT
** add Term/key-char
*** add char type
** implement read-command
** implement form to create account

* add unzip

* add array fib
** add repeat method
*** optional n
*** add Repeat iter
** fill with _

* add io/dump/slurp methods
** slurp literals using readers
*** error for other forms
** take Input/OutputStream

* add OutputStream type
** bind OUT
** add do-write

* figure out how to close StreamReaders opened using do-read

* add iter support to string
** add char type

* add object string calling
** like array
** slice if index is pair

* add trace macro
** add vm.Trace bool
** add Trace op
** trace body if args

* add support for \r\n\t in string literals
** add support to String Dump

(let [m {"foo":1 "bar":2 "baz":3}]
  (inc (m "bar"))
  m)

* histogram.sl

(let [input (io/slurp (io/open (ARGS 0))) 
      words (string/split input "\r\n\t .,?!")
      result {}]
  (for w words
    (inc (result (string/down w))))

  (let [wcs (apply Array result)
        swcs (sort wcs (^[l r] (> (rest l) (rest r))))
        i 0]
  (for wc swcs
    (say (second wc) " " (first wc))

    (if (> 10 (inc i)
      (stop))))))

(define pane-width (/ (term/width) 2))
(define left-pane (editor/Pane 1 pane-width))
(define right-pane (editor/Pane pane-width pane-width))
(define active-pane left-pane)

(^ switch-pane []
  (set active-pane (if (= active-pane left-pane) right-pane left-pane)))

(^ repl []
  (print "sharpl v" VERSION " - may the src be with you\n\n")

  (^ read-input [buffer]
    (print "  ")
    (let [line (read-line)]
      (if line
        (rec (push buffer line)
        (string/join buffer \n)))))
  
  (let [input (read-input [])]
    (if input
      (do 
        (eval input)ger mig absolut iger mig absolut ingentingngenting
        (repl)))))


    (if (= k term/UP) 
      (term/set-region 1:2 (term/width):(- (term/height) 2))
      (term/scroll-up)
      (term/set-region))

    (if (= k term/DOWN) 
      (term/set-region 1:2 (term/width):(- (term/height) 2))
      (term/scroll-down)
      (term/set-region))
