April 29th

399
168
483
523

[^1]
source.AsSpan(...).CopyTo(dest.AsSpan(...))

* add prefix reader

* add Pair slice support

* aoc2
** add filter macro
*** jalang
** add string/split
** add iter/enum
*** src & start index (default 0)
** add min/max methods
*** require comparable trait
** implement pair unification in let macro
** add support for _ slicing (array/string/list/map)
** make values callable
*** change into (arg v)

** add string/array/map/list slice assign

* add iter benchmark
** fib-tail but use loop instead of tail call

* port list benchmark to python

* track repetitions in demit
** add flag
** display frame graph

* make macros composeable
** create user method like VM.Compose
*** one for each arity

* add ports
** add port type
** port/send/recv methods
** port/spawn
*** start thread
**** separate vm
*** channels from nets project
** tcp
*** port/connect/listen/
** udp
*** port/send-to/recv-from

JsonSerializer serializer = new JsonSerializer();
MyObject o;
using (FileStream s = File.Open("bigfile.json", FileMode.Open))
using (StreamReader sr = new StreamReader(s))
using (JsonReader reader = new JsonTextReader(sr))
{
    while (reader.Read())
    {
        // deserialize only when there's "{" character in the stream
        if (reader.TokenType == JsonToken.StartObject)
        {
            o = serializer.Deserialize<MyObject>(reader);
        }
    }
}

using (FileStream? fileStream = new FileStream("hugefile.json", FileMode.Open))
{
    IAsyncEnumerable<Person?> people = JsonSerializer.DeserializeAsyncEnumerable<Person?>(fileStream);
    await foreach (Person? person in people)
    {
        Console.WriteLine($"Hello, my name is {person.Name}!");
    }
}

* add while lop
** iterate while condition is true

* add iter macro
** define usermethod like VM.Compose
** call body while T

(let [i 3 n 0]
  [(iter 
    (ind n i)
    (> (dec i) 0))*])

* add enums

(enum Foo bar baz)

Foo/bar
(Foo 0)
(Foo 'baz)
(Int Foo/bar)
(Str Foo/bar)

* investigate compiling linq expressions
** https://learn.microsoft.com/en-us/dotnet/api/system.linq.expressions.expression?view=net-8.0
** add Linq.Expression? Op.Compile()
*** default null

* acc
** bind key constants in term
*** ENTER LEFT RIGHT
** add Term/key-char
*** add char type
** implement read-command
** implement form to create account

* add zip/unzip

* add array fib
** add repeat method
*** optional n
*** add Repeat iter
** fill with _

* add io/dump/slurp methods
** slurp literals using readers
*** error for other forms
** take Input/OutputStream

* trex
** add io/string
** add StackTrait with push
*** implement for Array

* add OutputStream type
** bind OUT
** add do-write

* figure out how to close StreamReaders opened using do-read

* add iter support to string
** add char type

* add object string calling
** like array
** slice if index is pair

* add trace macro
** add vm.Trace bool
** add Trace op
** trace body if args

* add support for \r\n\t in string literals
** add support to String Dump

(let [m {"foo":1 "bar":2 "baz":3}]
  (inc (m "bar"))
  m)

* histogram.sl

(let [input (io/slurp (io/open (ARGS 0))) 
      words (string/split input "\r\n\t .,?!")
      result {}]
  (for w words
    (inc (result (string/down w))))

  (let [wcs (apply Array result)
        swcs (sort wcs (^[l r] (> (rest l) (rest r))))
        i 0]
  (for wc swcs
    (say (second wc) " " (first wc))

    (if (> 10 (inc i)
      (stop))))))

(define pane-width (/ (term/width) 2))
(define left-pane (editor/Pane 1 pane-width))
(define right-pane (editor/Pane pane-width pane-width))
(define active-pane left-pane)

(^ switch-pane []
  (set active-pane (if (= active-pane left-pane) right-pane left-pane)))

(^ repl []
  (print "sharpl v" VERSION " - may the src be with you\n\n")

  (^ read-input [buffer]
    (print "  ")
    (let [line (read-line)]
      (if line
        (rec (push buffer line)
        (string/join buffer \n)))))
  
  (let [input (read-input [])]
    (if input
      (do 
        (eval input)ger mig absolut iger mig absolut ingentingngenting
        (repl)))))


    (if (= k term/UP) 
      (term/set-region 1:2 (term/width):(- (term/height) 2))
      (term/scroll-up)
      (term/set-region))

    (if (= k term/DOWN) 
      (term/set-region 1:2 (term/width):(- (term/height) 2))
      (term/scroll-down)
      (term/set-region))
